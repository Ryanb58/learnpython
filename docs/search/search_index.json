{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to learn python!\n\n\nHello world, my name is Taylor Brazelton. I am the author of this website. I\nhope you find it to be useful on your journey to learning how to program using\npython.\n\n\nOften I run into people who say things such as \"Wow you write computer code? I\nwish I could do that\". Normally I ask those people to clarify why they think\nthey can't; more often than not I get responses along the lines of people\nnot knowing where they would begin.\n\n\nThat is one of the many reasons I have created this site. To help guide people\non their jounry to learn python.\n\n\nCurrently things are more of a work in progress but I will continue to add\ntutorials and helpful articles to this site as I aquire the time. In the mean\ntime check out the getting started section under the tutorials dropdown.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-learn-python",
            "text": "Hello world, my name is Taylor Brazelton. I am the author of this website. I\nhope you find it to be useful on your journey to learning how to program using\npython.  Often I run into people who say things such as \"Wow you write computer code? I\nwish I could do that\". Normally I ask those people to clarify why they think\nthey can't; more often than not I get responses along the lines of people\nnot knowing where they would begin.  That is one of the many reasons I have created this site. To help guide people\non their jounry to learn python.  Currently things are more of a work in progress but I will continue to add\ntutorials and helpful articles to this site as I aquire the time. In the mean\ntime check out the getting started section under the tutorials dropdown.",
            "title": "Welcome to learn python!"
        },
        {
            "location": "/tutorial/1-Getting-Started/",
            "text": "What is Python?\n\n\nPython is a programming language that is easy to read, fun to use, and quick\nfor development. There is an infinite amount of things you can accomplish by\nmixing and matching the modules in python. Think of this language as a way to connect things together in the digital world.\n\n\nUse Cases:\n\n\nAs I previously said, there is an infinite amount of tasks you can accomplish\nby using python, yet here I shall list a few that people normally want to do\nwhen first coming to python.\n\n\n\n\n\n\nAutomate a repetitve task on the computer.\n\n\n\n\n\n\nCreate a timer that triggers real actions such as turning ones  thermostat\ndown at night.\n\n\n\n\n\n\nTake data from a website and place it into a file for use on your desktop.\n\n\n\n\n\n\nRename a lot of files or folders at once.\n\n\n\n\n\n\nBuild an interactive website.\n\n\n\n\n\n\nProcess a lot of data.\n\n\n\n\n\n\nHow To Run The Code:\n\n\nMost times you would install python locally, however, that takes some effort\nthat you may not want to go through initially. Below is the link to the offical\npython website where you can download it if you want:\n\n\npython\n\n\nFor those of you who just want to get started, I recomend just visiting the URL\n below, as everything this tutorial covers is executable on this webpage.\n\n\nPython REPL\n\n\nOnce you open up the page above, you should see something along the following:\n\n\nPython 3.6.x (default, Dec 2015, 13:05:11)\n[GCC 4.8.2] on linux\n>\n\n\n\n\nThis is called the python interpreter. The code from the tutorials can be typed\ndirectly into this area. We will not be using the \nmain.py\n file for a bit.\n\n\nWriting Your First Code:\n\n\nUpon embarking on the task of learning a new language a developer always starts\nout by attempting to get the language to print the text \"Hello, world!\" on the\nscreen. This is called the Hello World Test. Doing so validates their\ndevelopment environment and desktop as a whole are setup properly. Lets attempt\nthis here in python.\n\n\n>>> print(\"Hello, world!\")\nHello, world!\n\n\n\n\nprint\n is a very useful function that is available in all version of python.\n\n\nTake note of how we put the sentence inside of quotes. This is called a string\nin most programming languages.",
            "title": "1 Getting Started"
        },
        {
            "location": "/tutorial/1-Getting-Started/#what-is-python",
            "text": "Python is a programming language that is easy to read, fun to use, and quick\nfor development. There is an infinite amount of things you can accomplish by\nmixing and matching the modules in python. Think of this language as a way to connect things together in the digital world.",
            "title": "What is Python?"
        },
        {
            "location": "/tutorial/1-Getting-Started/#use-cases",
            "text": "As I previously said, there is an infinite amount of tasks you can accomplish\nby using python, yet here I shall list a few that people normally want to do\nwhen first coming to python.    Automate a repetitve task on the computer.    Create a timer that triggers real actions such as turning ones  thermostat\ndown at night.    Take data from a website and place it into a file for use on your desktop.    Rename a lot of files or folders at once.    Build an interactive website.    Process a lot of data.",
            "title": "Use Cases:"
        },
        {
            "location": "/tutorial/1-Getting-Started/#how-to-run-the-code",
            "text": "Most times you would install python locally, however, that takes some effort\nthat you may not want to go through initially. Below is the link to the offical\npython website where you can download it if you want:  python  For those of you who just want to get started, I recomend just visiting the URL\n below, as everything this tutorial covers is executable on this webpage.  Python REPL  Once you open up the page above, you should see something along the following:  Python 3.6.x (default, Dec 2015, 13:05:11)\n[GCC 4.8.2] on linux\n>  This is called the python interpreter. The code from the tutorials can be typed\ndirectly into this area. We will not be using the  main.py  file for a bit.",
            "title": "How To Run The Code:"
        },
        {
            "location": "/tutorial/1-Getting-Started/#writing-your-first-code",
            "text": "Upon embarking on the task of learning a new language a developer always starts\nout by attempting to get the language to print the text \"Hello, world!\" on the\nscreen. This is called the Hello World Test. Doing so validates their\ndevelopment environment and desktop as a whole are setup properly. Lets attempt\nthis here in python.  >>> print(\"Hello, world!\")\nHello, world!  print  is a very useful function that is available in all version of python.  Take note of how we put the sentence inside of quotes. This is called a string\nin most programming languages.",
            "title": "Writing Your First Code:"
        },
        {
            "location": "/tutorial/2-Variables/",
            "text": "Numbers\n\n\nLets pop into an interactive shell and type the following:\n\n\n4 * 7\n\n\n\n\nYou should see something similar to the following:\n\n\n>>> 4 * 7\n28\n\n\n\n\nAwesome! You just did multiplication and the product(result) was printed below\nyour input.\n\n\nThe astrisk between the four and the seven is called an operator in python.\nOperators are normally very intuitive for example: \n+\n, \n-\n, and \n/\n are all operators. In fact they match up to the actions of \nadding\n, \nsubtracting\n, and \ndividing\n.\n\n\nLets try them out:\n\n\n>>> 4 + 7\n11\n>>> 4 - 7\n-3\n>>> 8 / 2\n4.0\n\n\n\n\nNeato! That seemed to of worked pretty well, but what about other operators?\nSadly this page would become cluttered if I were to include every operator on\nit. Yet luckily for you there is documentation. The python docs are a fantastic\nresource when you need to perform some sort of action but are unsure how. Lets\nvisit their documentation now:\n\n\nhttps://docs.python.org/3/library/operator.html#mapping-operators-to-functions\n\n\nThe link above is a direct link to the operators table that python includes.\nSo now for the challenge:\n\n\nTake 4 to the power of 7. Your result should be: 16384\n\n\nAnswer:\n\n\n>>> 4**7\n16384\n\n\n\n\nVariables\n\n\nNow that you have learned how to use operators in python, lets dive into the\nuse of variables. You can think of a variable as an alias or reference for the\nresult of the operator.\n\n\nFor example if you run this code:\n\n\n>>> result = 4 * 7\n\n\n\n\nYou will notice that the answer of 4 times 7 did not print out on the next\nline. This is because the product was stored in a variable named \nresult\n.\nTo see the contents of that variable just type in the name on another line.\n\n\n>>> result\n28\n\n\n\n\nNow everytime you need the number 28 you can simply interject the variable\n\nresult\n.\n\n\n>>> result - 10\n18\n\n\n\n\nGreat job, you just used a variable in your code. Although if you thought that\nthe variable \nresult\n would reference the number 18 now, you would be wrong.\nThat is because we didn't assign the variable to the result of the equation\nwe wrote in our code. Try typing in \nresult\n now and it should output \n28\n\nstill.\n\n\nStrings\n\n\nHow about adding some test into the mix.",
            "title": "2 Variables"
        },
        {
            "location": "/tutorial/2-Variables/#numbers",
            "text": "Lets pop into an interactive shell and type the following:  4 * 7  You should see something similar to the following:  >>> 4 * 7\n28  Awesome! You just did multiplication and the product(result) was printed below\nyour input.  The astrisk between the four and the seven is called an operator in python.\nOperators are normally very intuitive for example:  + ,  - , and  /  are all operators. In fact they match up to the actions of  adding ,  subtracting , and  dividing .  Lets try them out:  >>> 4 + 7\n11\n>>> 4 - 7\n-3\n>>> 8 / 2\n4.0  Neato! That seemed to of worked pretty well, but what about other operators?\nSadly this page would become cluttered if I were to include every operator on\nit. Yet luckily for you there is documentation. The python docs are a fantastic\nresource when you need to perform some sort of action but are unsure how. Lets\nvisit their documentation now:  https://docs.python.org/3/library/operator.html#mapping-operators-to-functions  The link above is a direct link to the operators table that python includes.\nSo now for the challenge:  Take 4 to the power of 7. Your result should be: 16384  Answer:  >>> 4**7\n16384",
            "title": "Numbers"
        },
        {
            "location": "/tutorial/2-Variables/#variables",
            "text": "Now that you have learned how to use operators in python, lets dive into the\nuse of variables. You can think of a variable as an alias or reference for the\nresult of the operator.  For example if you run this code:  >>> result = 4 * 7  You will notice that the answer of 4 times 7 did not print out on the next\nline. This is because the product was stored in a variable named  result .\nTo see the contents of that variable just type in the name on another line.  >>> result\n28  Now everytime you need the number 28 you can simply interject the variable result .  >>> result - 10\n18  Great job, you just used a variable in your code. Although if you thought that\nthe variable  result  would reference the number 18 now, you would be wrong.\nThat is because we didn't assign the variable to the result of the equation\nwe wrote in our code. Try typing in  result  now and it should output  28 \nstill.",
            "title": "Variables"
        },
        {
            "location": "/tutorial/2-Variables/#strings",
            "text": "How about adding some test into the mix.",
            "title": "Strings"
        },
        {
            "location": "/tutorial/3-Lists/",
            "text": "",
            "title": "3 Lists"
        },
        {
            "location": "/tutorial/4-Dictionaries/",
            "text": "",
            "title": "4 Dictionaries"
        },
        {
            "location": "/tutorial/5-Functions/",
            "text": "",
            "title": "5 Functions"
        },
        {
            "location": "/tutorial/6-Classes/",
            "text": "",
            "title": "6 Classes"
        }
    ]
}